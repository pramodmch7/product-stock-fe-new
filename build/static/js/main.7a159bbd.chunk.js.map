{"version":3,"sources":["Components/InfoView.jsx","Components/InfoViewBtn.jsx","Data/TabelRawProduct.js","Data/ProductsData.js","Components/RawProduct/RPViewM.jsx","Components/Charts/RPCharts/RPPiChart.jsx","Components/RawProduct/RProductAEM.jsx","Data/TabelFinalProduct.js","Data/TabelSelectedRawProduct.js","Components/FinalProduct/FPView.jsx","Components/DownloadPDF.jsx","Data/TabelProcessProduct.js","Components/ProcessProduct/PPView.jsx","Components/NavBar.jsx","Components/BttonIncDec.jsx","Components/FinalProduct/FProductAEM.jsx","Components/FinalProduct/FProductEM.jsx","Components/Charts/FPCharts/FPChartStacjed.jsx","Components/Dashboard/VNDashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["classes","editIcon","backgroundColor","teal","color","border","borderRadius","fontWeight","deleteIcon","red","api","axios","create","baseURL","InfoView","data","views","useState","View","setView","DeleteItems","ele","a","window","confirm","put","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","transition","Slide","setTimeout","dismiss","Element","document","querySelector","config","childList","attributes","MutationObserver","ML","OB","m","type","addedNodes","length","location","reload","observe","classList","add","remove","ReactDOM","createPortal","className","id","onClick","style","float","RPN","RPD","RPW","flexDirection","justifyContent","RPQ","RPP","width","to","state","Data","info","Button","variant","size","startIcon","e","getElementById","InfoViewBtn","Click","infoData","setInfoData","infoClicked","setInfoClicked","value","clicked","RPColumns","Mobile","title","field","filtering","editable","cellStyle","textAlign","render","rowData","Desk","currencySetting","currencyCode","getAllRawProduct","get","then","da","getAllFinalProduct","getOneFinalProduct","getAllProcessProdct","ownStyles","makeStyles","ClipCount","TableTopRow","display","myTheam","createTheme","palette","primary","yellow","secondary","main","RPViewM","rProduct","setRProduct","getRowProducts","setloading","useEffect","console","log","getColumns","innerWidth","addEventListener","columns","map","RProduct","nums","slno","loading","ThemeProvider","Container","Paper","Box","alignItems","Typography","component","Chip","label","isLoading","actions","rawData","icon","tooltip","options","pageSize","exportButton","addRowPosition","actionsColumnIndex","selection","showSelectAllCheckbox","showTextRowsSelected","columnsButton","header","padding","toolbarButtonAlignment","RPPiChart","getRPData","message","qtyData1","push","marginTop","chartType","pieHole","is3D","pieSliceText","height","chartArea","legend","maxLines","alignment","textStyle","showColorCode","OwnStyles","theam","successBtn","borderColor","success","dark","errorBtn","infoBtn","fontSize","typography","caption","paddingLeft","textRow","infoChip","RPViewAEM","InnerWidth","checkWidth","setCheckWidth","enteredData","setEnteredData","getEnteredData","Name","target","name","Value","prevState","useLocation","navigate","useNavigate","reset","createRawProduct","post","response","code","split","btn","createElement","textContent","dun","recoverRawProduct","appendChild","delay","updateRawProduct","_id","goBackRP","Grid","container","item","xs","lg","md","xl","sm","clickable","Divider","TextField","required","autoComplete","fullWidth","margin","onChange","FPColumns","SRPColumns","Cell","row","FPView","fProduct","setFProduct","selectedRow","setSelectedRow","getFinalProducts","sRPColumns","processProducts","element","forEach","rd","JSON","stringify","newData","PPN","PPD","PRM","join","PPP","warning","Show","innerHTML","noProduct","detailPanel","rowDetails","maxHeight","overflow","search","grouping","paging","toolbar","onRowClick","evt","togglePannel","tableData","rowStyle","DownloadPDF","IconButton","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","PDF","jsPDF","text","line","PPL","pdfda","index","save","PPColumns","PPView","PProducts","setPProducts","getProcessedProducts","PProduct","customTheam","drawerWidth","useStyles","root","appBar","transitions","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","content","flexGrow","contentShift","appBottomMargin","marginBottom","NavBar","useTheme","React","open","setOpen","handleDrawerClose","Path","AppBar","clsx","Toolbar","edge","noWrap","Drawer","anchor","paper","direction","List","path","i","ListItem","button","ListItemText","newIcon","deepOrange","btnChipM","PointerEvent","btnChipP","green","btnChip","btnRow","grey","btninput","ButtonIncDec","props","changeReqQty","defultData","parseInt","setState","incrimentReqQty","prev","decrimentReqQty","prData","availableQty","this","currentNRPQ","Where","disabled","InputID","max","min","Component","iconS","iconGreen","iconOrange","orange","iconGreenOut","iconOrangeOut","iconRedOut","paddingZero","ownTheam","FProductAEM","FPN","FPD","zeroRawProduct","setZeroRawProduct","RPProductsC","RPProductsZ","getFPData","selectedProduct","setSelectedProduct","onCheckedItem","selData","filter","obj","SelData","querySelectorAll","dda","changeRawProductQty","createProduct","FRM","goBack","maxWidth","userSelect","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","sp","spI","onDelete","b","changeData","deleteSelProduct","rp","rpI","elevation","zp","zpI","FProductEM","oldSelectedProduct","setOldSelectedProduct","newSelectedProduct","setNewSelectedProduct","updateSelectedProduct","setUpdateSelectedProduct","getFPDataEdit","RRP","SRDetails","updateFinalProduct","URM","ORM","NRM","newTestingData","Check","Odata","OldSelData","oldSelectedData","newSelectedData","checkOnOldProducts","FPChartStacjed","FData","qtyData","role","frprods","frpI","isStacked","chart","subtitle","bar","groupWidth","vAxis","minValue","ticks","VNDashboard","fda","ind","App","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.7a159bbd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { red, teal } from \"@material-ui/core/colors\";\r\n// import Button from \"../CommonComps/Button\";\r\n\r\nconst classes = {\r\n  editIcon: {\r\n    backgroundColor: teal[100],\r\n    color: teal[900],\r\n    border: `1px solid ${teal[900]}`,\r\n    borderRadius: \"4px\",\r\n    fontWeight: 700,\r\n  },\r\n  deleteIcon: {\r\n    backgroundColor: red[100],\r\n    color: red[900],\r\n    border: `1px solid ${red[900]}`,\r\n    borderRadius: \"4px\",\r\n    fontWeight: 700,\r\n  },\r\n};\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nfunction InfoView({ data, views }) {\r\n  const [View, setView] = useState(true);\r\n  const closeInfo = () => {\r\n    setView(false);\r\n    views();\r\n  };\r\n  const DeleteItems = async (ele, data) => {\r\n    let del = window.confirm(\r\n      `Are you Sure you want to delete the Raw Product \"${data[\"RPN\"]}\"`\r\n    );\r\n\r\n    if (del) {\r\n      await api.put(`drp/${data[\"id\"]}`, data);\r\n      toast.error(\"Raw Product Deleted from the system!\", {\r\n        position: \"top-right\",\r\n        autoClose: 2900,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n        transition: Slide,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        toast.dismiss();\r\n      }, 3000);\r\n\r\n      const Element = document.querySelector(\".Toastify\");\r\n      const config = { childList: true, attributes: true };\r\n      const callBack = (ML, OB) => {\r\n        for (const m of ML) {\r\n          if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n            window.location.reload();\r\n          }\r\n        }\r\n      };\r\n      const Obser = new MutationObserver(callBack);\r\n\r\n      Obser.observe(Element, config);\r\n    }\r\n    View\r\n      ? document.querySelector(\"#cardSelect\").classList.add(\"Card_Pr_Af\")\r\n      : document.querySelector(\"#cardSelect\").classList.remove(\"Card_Pr_Af\");\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <>\r\n      {View ? (\r\n        <div className=\"Card-Pr-Bg\">\r\n          <div className=\"card-body Card-Pr Card_Pr\" id=\"cardSelect\">\r\n            <div className=\"mdc-card\">\r\n              <div>\r\n                <span\r\n                  className=\"material-icons COM COM-Mar \"\r\n                  onClick={closeInfo}\r\n                  style={{ color: \"red\", float: \"right\", fontWeight: 900 }}\r\n                >\r\n                  close\r\n                </span>\r\n              </div>\r\n              <div>\r\n                <h4 className=\"card-text\">{data.RPN}</h4>\r\n              </div>\r\n              <div>\r\n                <h6>Description: {data.RPD}</h6>\r\n              </div>\r\n              <div>\r\n                <h6>Weight: {data.RPW}</h6>\r\n              </div>\r\n              <div\r\n                className=\"D-Flex\"\r\n                style={{ flexDirection: \"row\", justifyContent: \"space-evenly\" }}\r\n              >\r\n                <div\r\n                  className=\"Pra-Tbl-Det\"\r\n                  style={{\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <p className=\"viewDataT text-right\">Available Qty</p>\r\n                  <p className=\"viewDataT text-right\">Price</p>\r\n                  <p className=\"viewDataT text-right\">Total Cost</p>\r\n                </div>\r\n                <div\r\n                  className=\"Pra-Tbl-Det\"\r\n                  style={{\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <p className=\"viewDataD text-left\">{data.RPQ}</p>\r\n                  <p className=\"viewDataD text-left\">{data.RPP}</p>\r\n                  <p className=\"viewDataD text-left\">\r\n                    AED {data.RPQ * data.RPP}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              <span className=\"D-Flex D-Flex-New-row\" style={{ width: \"100%\" }}>\r\n                <Link\r\n                  to=\"/rp/update\"\r\n                  state={{\r\n                    Data: {\r\n                      data: data,\r\n                      info: [\r\n                        \"Update Raw Product\",\r\n                        \"You can make changes to existing Raw Products in system.\",\r\n                        \"Update Raw Product\",\r\n                        true,\r\n                      ],\r\n                    },\r\n                  }}\r\n                >\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    variant=\"outlined\"\r\n                    size=\"large\"\r\n                    startIcon={<EditIcon />}\r\n                    style={classes.editIcon}\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </Link>\r\n                <Button\r\n                  color=\"secondary\"\r\n                  variant=\"outlined\"\r\n                  size=\"large\"\r\n                  startIcon={<DeleteIcon />}\r\n                  onClick={(e) => DeleteItems(e, data)}\r\n                  style={classes.deleteIcon}\r\n                >\r\n                  Del\r\n                </Button>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </>,\r\n    document.getElementById(\"InfoView\")\r\n  );\r\n}\r\n\r\nexport default InfoView;\r\n","import React, { useState } from \"react\";\r\n\r\nimport InfoView from \"./InfoView\";\r\n\r\nfunction InfoViewBtn({ Click }) {\r\n  const [infoData, setInfoData] = useState(\"\");\r\n  const [infoClicked, setInfoClicked] = useState(false);\r\n\r\n  const InfoClicked = (ele) => {\r\n    setInfoData(Click);\r\n    setInfoClicked(true);\r\n\r\n    document.querySelector(\"#card-pr-blur\").classList.add(\"Card-Pr-Blur\");\r\n  };\r\n\r\n  const onChangeEvent = (value) => {\r\n    if (value === undefined) {\r\n      document.querySelector(\"#card-pr-blur\").classList.remove(\"Card-Pr-Blur\");\r\n      setInfoClicked(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <span\r\n        className=\"material-icons COM text-info\"\r\n        id=\"infoButton\"\r\n        onClick={(e) => InfoClicked(e)}\r\n      >\r\n        info\r\n      </span>\r\n      {infoClicked && (\r\n        <InfoView data={infoData} views={onChangeEvent} clicked={infoClicked} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default InfoViewBtn;\r\n","import InfoViewBtn from \"../Components/InfoViewBtn\";\r\n\r\nexport const RPColumns = {\r\n  Mobile: [\r\n    {\r\n      title: \"Sl No\",\r\n      width: \"5%\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"RPN\",\r\n      width: \"50%\",\r\n    },\r\n    {\r\n      title: \"Quantity\",\r\n      field: \"RPQ\",\r\n      filtering: false,\r\n      width: \"10%\",\r\n      cellStyle: {\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      title: \"Info\",\r\n      field: \"info\",\r\n      filtering: false,\r\n      editable: \"never\",\r\n      width: \"10%\",\r\n      render: (rowData) => <InfoViewBtn Click={rowData} />,\r\n    },\r\n  ],\r\n  Desk: [\r\n    {\r\n      title: \"Sl No\",\r\n      width: \"5%\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"RPN\",\r\n      width: \"40%\",\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      field: \"RPD\",\r\n      width: \"40%\",\r\n    },\r\n    {\r\n      title: \"Weight\",\r\n      field: \"RPW\",\r\n      filtering: false,\r\n      width: \"5%\",\r\n      cellStyle: {\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      title: \"Quantity\",\r\n      field: \"RPQ\",\r\n      filtering: false,\r\n      width: \"5%\",\r\n      cellStyle: {\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      field: \"RPP\",\r\n      filtering: false,\r\n      width: \"10%\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n    {\r\n      title: \"Cost\",\r\n      field: \"RPCost\",\r\n      filtering: false,\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n      editable: \"never\",\r\n    },\r\n  ],\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"/\",\r\n});\r\n\r\nexport let getAllRawProduct = async () => {\r\n  let da = await api.get(`garp`).then(({ data }) => data);\r\n  return da;\r\n};\r\n\r\nexport let getAllFinalProduct = async () => {\r\n  let da = await api.get(`gafp`).then(({ data }) => data);\r\n  return da;\r\n};\r\n\r\nexport let getOneFinalProduct = async (id) => {\r\n  let da = await api.get(`gsfp/${id}`).then(({ data }) => data);\r\n  return da;\r\n};\r\n\r\nexport let getAllProcessProdct = async () => {\r\n  let da = await api.get(`gapp`).then(({ data }) => data);\r\n  return da;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, Slide, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport MaterialTable from \"material-table\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport {\r\n  Avatar,\r\n  Box,\r\n  Button,\r\n  Chip,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport { RPColumns } from \"../../Data/TabelRawProduct\";\r\nimport { getAllRawProduct } from \"../../Data/ProductsData\";\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nconst ownStyles = makeStyles({\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontWeight: 900,\r\n  },\r\n  TableTopRow: {\r\n    display: \"flex\",\r\n  },\r\n});\r\nconst myTheam = createTheme({\r\n  // palette: {\r\n  //   primary: {\r\n  //     main: purple[500],\r\n  //   },\r\n  //   secondary: {\r\n  //     main: \"#ff9100\",\r\n  //   },\r\n  //   type: \"light\",\r\n  // },\r\n  palette: {\r\n    primary: yellow,\r\n    secondary: {\r\n      main: \"#ff9100\",\r\n    },\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nfunction RPViewM() {\r\n  const classes = ownStyles();\r\n  const [rProduct, setRProduct] = useState([]);\r\n\r\n  const getRowProducts = async () => {\r\n    let da = await getAllRawProduct().then((data) => data);\r\n\r\n    setRProduct(da[\"message\"]);\r\n    setloading(false);\r\n  };\r\n\r\n  const checkWidth = () => {\r\n    window.innerWidth > 768 &&\r\n      document.querySelector(\"#card-pr-blur\").classList.add(\"container-fluid\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRowProducts();\r\n\r\n    return () => {\r\n      console.log(\"Cleaning Up\");\r\n    };\r\n  }, []);\r\n  const addValies = () => {\r\n    return rProduct.map((RProduct, nums) => {\r\n      const Data = {\r\n        ...RProduct,\r\n        slno: nums + 1,\r\n      };\r\n      return Data;\r\n    });\r\n  };\r\n\r\n  const getColumns = () => {\r\n    return window.innerWidth > 768 ? RPColumns.Desk : RPColumns.Mobile;\r\n  };\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    getColumns();\r\n  });\r\n\r\n  const columns = getColumns();\r\n  const data = addValies();\r\n\r\n  const noProduct = () => {\r\n    const Show = document.querySelector(\".rt-noData\");\r\n    if (Show) {\r\n      Show.innerHTML = \"<b>No Product Available</b>\";\r\n    }\r\n  };\r\n  const [loading, setloading] = useState(true);\r\n\r\n  const DeleteItems = async (ele, data) => {\r\n    console.log(data);\r\n    let del = window.confirm(\r\n      `Are you Sure you want to delete the Raw Product \"${data[\"RPN\"]}\"`\r\n    );\r\n\r\n    if (del) {\r\n      await api.put(`drp/${data[\"id\"]}`, data);\r\n      toast.error(\"Raw Product Deleted from the system!\", {\r\n        position: \"top-right\",\r\n        autoClose: 2900,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n        transition: Slide,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        toast.dismiss();\r\n      }, 3000);\r\n\r\n      const Element = document.querySelector(\".Toastify\");\r\n      const config = { childList: true, attributes: true };\r\n      const callBack = (ML, OB) => {\r\n        for (const m of ML) {\r\n          if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n            window.location.reload();\r\n          }\r\n        }\r\n      };\r\n      const Obser = new MutationObserver(callBack);\r\n\r\n      Obser.observe(Element, config);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={myTheam}>\r\n        <div className=\"CheckHeader\" id=\"card-pr-blur\">\r\n          <Container>\r\n            <Paper>\r\n              <Box\r\n                className={classes.TableTopRow}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n              >\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                  Raw Materials\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                className={classes.TableTopRow}\r\n                justifyContent={\"space-between\"}\r\n                alignItems={\"center\"}\r\n              >\r\n                <Box>\r\n                  <Link\r\n                    to=\"/rp/add\"\r\n                    state={{\r\n                      Data: {\r\n                        data: \"a\",\r\n                        info: [\r\n                          \"Create New Raw Product\",\r\n                          \"You can create a new raw product which is not yet available in system. \\nNote: You cannot create raw product with same name.\",\r\n                          \"Add Raw Product\",\r\n                          false,\r\n                        ],\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button color=\"secondary\" variant=\"contained\" size=\"large\">\r\n                      Create Raw Product\r\n                    </Button>\r\n                  </Link>\r\n                </Box>\r\n\r\n                <Box>\r\n                  <Chip\r\n                    className={classes.ClipCount}\r\n                    label={rProduct.length}\r\n                    color=\"secondary\"\r\n                  />\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n            <Box>\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                title={\"\"}\r\n                isLoading={loading}\r\n                actions={[\r\n                  (rawData) => ({\r\n                    icon: () => (\r\n                      <Link\r\n                        to=\"/rp/update\"\r\n                        state={{\r\n                          Data: {\r\n                            data: rawData[0],\r\n                            info: [\r\n                              \"Update Raw Product\",\r\n                              \"You can make changes to existing Raw Products in system.\",\r\n                              \"Update Raw Product\",\r\n                              true,\r\n                            ],\r\n                          },\r\n                        }}\r\n                      >\r\n                        <EditIcon />\r\n                      </Link>\r\n                    ),\r\n\r\n                    tooltip: \"Edit\",\r\n                    onClick: () => console.log(rawData),\r\n                  }),\r\n                  {\r\n                    icon: \"delete\",\r\n                    tooltip: \"Delete\",\r\n                    onClick: (e, data) => DeleteItems(e, data[0]),\r\n                  },\r\n                ]}\r\n                options={{\r\n                  pageSize: 10,\r\n                  filtering: false,\r\n                  exportButton: false,\r\n                  addRowPosition: \"first\",\r\n                  actionsColumnIndex: -1,\r\n                  selection: true,\r\n                  showSelectAllCheckbox: false,\r\n                  showTextRowsSelected: false,\r\n                  columnsButton: true,\r\n                  header: true,\r\n                  padding: \"dense\",\r\n                  toolbarButtonAlignment: \"left\",\r\n                }}\r\n              />\r\n            </Box>\r\n          </Container>\r\n        </div>\r\n      </ThemeProvider>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RPViewM;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\nimport { Container, Box } from \"@material-ui/core\";\r\n\r\nimport { getAllRawProduct } from \"../../../Data/ProductsData\";\r\n\r\nfunction RPPiChart() {\r\n  const [rProduct, setRProduct] = useState([]);\r\n\r\n  const getRPData = async () => {\r\n    let da = await getAllRawProduct().then((data) => data);\r\n\r\n    setRProduct(da.message);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRPData();\r\n    return () => {\r\n      console.log(\"Cleaned Up!\");\r\n    };\r\n  }, []);\r\n\r\n  const qtyData1 = [];\r\n  const options1 = {\r\n    title: \"Available Stocks of Raw Material\",\r\n    pieHole: 0.2,\r\n    is3D: \"false\",\r\n    pieSliceText: \"values\",\r\n    width: \"100%\",\r\n    height: \"70vh\",\r\n    chartArea: {\r\n      width: \"100%\",\r\n    },\r\n    legend: {\r\n      position: \"top\",\r\n      maxLines: 5,\r\n      alignment: \"left\",\r\n    },\r\n    tooltip: {\r\n      textStyle: { color: \"#FF0000\" },\r\n      showColorCode: true,\r\n    },\r\n  };\r\n\r\n  const addValies1 = () => {\r\n    qtyData1.push([\"\", \"\"]);\r\n    return rProduct.map((rProduct, nums) => {\r\n      qtyData1.push([rProduct[\"RPN\"], rProduct[\"RPQ\"]]);\r\n    });\r\n  };\r\n  addValies1();\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Box marginTop={1}>\r\n          <Chart\r\n            chartType=\"PieChart\"\r\n            data={qtyData1}\r\n            width=\"100%\"\r\n            options={options1}\r\n          />\r\n        </Box>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default RPPiChart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, ToastContainer, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { getAllRawProduct } from \"../../Data/ProductsData\";\r\nimport {\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Divider,\r\n  TextField,\r\n  Button,\r\n  Icon,\r\n  Chip,\r\n  ButtonGroup,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  lightGreen,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport RPPiChart from \"../Charts/RPCharts/RPPiChart\";\r\n\r\nconst OwnStyles = makeStyles((theam) => ({\r\n  successBtn: {\r\n    borderColor: theam.palette.success.dark,\r\n    color: theam.palette.success.dark,\r\n  },\r\n  errorBtn: {\r\n    borderColor: theam.palette.error.dark,\r\n    color: theam.palette.error.dark,\r\n  },\r\n  infoBtn: {\r\n    borderColor: theam.palette.info.dark,\r\n    color: theam.palette.info.dark,\r\n  },\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontSize: theam.typography.caption.fontSize,\r\n    backgroundColor: theam.palette.info.main,\r\n    paddingLeft: 1,\r\n  },\r\n  textRow: {\r\n    display: \"flex\",\r\n  },\r\n  infoChip: {\r\n    backgroundColor: teal[100],\r\n    color: teal[900],\r\n    border: `1px solid ${teal[900]}`,\r\n    fontWeight: 700,\r\n  },\r\n}));\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nexport default function RPViewAEM() {\r\n  const classes = OwnStyles();\r\n  let InnerWidth = () => window.innerWidth;\r\n  const [checkWidth, setCheckWidth] = useState(InnerWidth);\r\n  const [enteredData, setEnteredData] = useState({\r\n    RPN: \"\",\r\n    RPD: \"\",\r\n    RPQ: \"\",\r\n    RPP: \"\",\r\n    RPW: \"\",\r\n  });\r\n\r\n  function getEnteredData(e) {\r\n    let Name = e.target.name;\r\n    let Value = e.target.value;\r\n    setEnteredData((prevState) => ({\r\n      ...prevState,\r\n      [Name]: Value,\r\n    }));\r\n  }\r\n\r\n  const [rProduct, setRProduct] = useState([]);\r\n\r\n  const getRPData = async () => {\r\n    let da = await getAllRawProduct().then((data) => data);\r\n\r\n    setRProduct(da.message);\r\n  };\r\n\r\n  const { state } = useLocation();\r\n  let navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    getRPData();\r\n\r\n    const Data = state.Data.data;\r\n    setEnteredData({\r\n      RPN: Data[\"RPN\"],\r\n      RPD: Data[\"RPD\"],\r\n      RPQ: Data[\"RPQ\"],\r\n      RPP: Data[\"RPP\"],\r\n      RPW: Data[\"RPW\"],\r\n      id: Data[\"id\"],\r\n    });\r\n    return () => {\r\n      console.log(\"Cleaned Up!\");\r\n    };\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setEnteredData({\r\n      RPN: \"\",\r\n      RPD: \"\",\r\n      RPQ: \"\",\r\n      RPP: \"\",\r\n      RPW: \"\",\r\n    });\r\n  };\r\n\r\n  const createRawProduct = async () => {\r\n    const response = await api.post(`anrp`, enteredData);\r\n\r\n    if (response.data.code.split(\"|\")[0] === \"Recover\") {\r\n      const btn = document.createElement(\"button\");\r\n      // btn.setAttribute(\"textContext\", \"Recover\");\r\n      btn.textContent = \"Recover\";\r\n      const dun = recoverRawProduct;\r\n      btn.addEventListener(\"click\", function () {\r\n        dun(response.data.code.split(\"|\")[1]);\r\n        // this.recoverRawProductTest(response.data.code.split(\"|\")[1]);\r\n      });\r\n      document.querySelector(\"#btns\").appendChild(btn);\r\n    }\r\n    getRPData();\r\n    toast.success(\"Raw Product Created in the system!\", {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"colored\",\r\n      delay: 500,\r\n      transition: Slide,\r\n    });\r\n    reset();\r\n  };\r\n\r\n  const updateRawProduct = async () => {\r\n    await api.put(`urp/${enteredData[\"id\"]}`, enteredData);\r\n    getRPData();\r\n    // setEditID(editID);\r\n    // reset();\r\n    // this.setState({\r\n    //   enteredData: { Id: \"\", RPN: \"\", RPD: \"\", RPQ: \"\", RPP: \"\", RPW: \"\" },\r\n    //   editID: \"\",\r\n    // });\r\n    toast.info(\"Changes has been made to Raw Product\", {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"colored\",\r\n      transition: Slide,\r\n    });\r\n    // setTimeout(() => {\r\n    //   navigate(\"/supp\");\r\n    // }, 1600);\r\n\r\n    const Element = document.querySelector(\".Toastify\");\r\n    const config = { childList: true, attributes: true };\r\n    const callBack = (ML, OB) => {\r\n      for (const m of ML) {\r\n        if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n          navigate(\"/rp\");\r\n        }\r\n      }\r\n    };\r\n    const Obser = new MutationObserver(callBack);\r\n\r\n    Obser.observe(Element, config);\r\n  };\r\n\r\n  const recoverRawProduct = async (_id) => {\r\n    await api.put(`rrp/${_id}`);\r\n    getRPData();\r\n    reset();\r\n  };\r\n\r\n  const goBackRP = () => navigate(\"/rp\");\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    setCheckWidth(InnerWidth);\r\n  });\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div className=\"CheckHeader\">\r\n          <Container>\r\n            <Grid container>\r\n              <Grid item xs={12} lg={5} md={5} xl={5} sm={7}>\r\n                <Box>\r\n                  <Paper>\r\n                    <Box\r\n                      className={classes.textRow}\r\n                      justifyContent=\"space-between\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Typography variant=\"h5\" component={\"h6\"}>\r\n                        {state.Data[\"info\"][0]}\r\n                      </Typography>\r\n                      {!state.Data[\"info\"][3] ? (\r\n                        <Chip\r\n                          className={classes.infoChip}\r\n                          label={`View: ${rProduct.length}`}\r\n                          size=\"small\"\r\n                          clickable={true}\r\n                          onClick={goBackRP}\r\n                          variant=\"outlined\"\r\n                        />\r\n                      ) : (\r\n                        <Chip\r\n                          className={classes.infoChip}\r\n                          label={`Edit for: ${enteredData[\"RPN\"]}`}\r\n                          size=\"small\"\r\n                          clickable={true}\r\n                          onClick={goBackRP}\r\n                          variant=\"outlined\"\r\n                        />\r\n                      )}\r\n                    </Box>\r\n                    <Box>\r\n                      <Typography variant=\"body2\" component={\"p\"}>\r\n                        {state.Data[\"info\"][1]}\r\n                      </Typography>\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box>\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Name\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        name=\"RPN\"\r\n                        value={enteredData[\"RPN\"]}\r\n                        onChange={getEnteredData}\r\n                        size=\"medium\"\r\n                      />\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Description\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        name=\"RPD\"\r\n                        value={enteredData[\"RPD\"]}\r\n                        onChange={getEnteredData}\r\n                      />\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Quantity\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        name=\"RPQ\"\r\n                        type=\"number\"\r\n                        value={enteredData[\"RPQ\"]}\r\n                        onChange={getEnteredData}\r\n                      />\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Price\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        name=\"RPP\"\r\n                        type=\"number\"\r\n                        value={enteredData[\"RPP\"]}\r\n                        onChange={getEnteredData}\r\n                      />\r\n                      <TextField\r\n                        id=\"outlined-basic\"\r\n                        label=\"Weight\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        margin=\"dense\"\r\n                        name=\"RPW\"\r\n                        type=\"text\"\r\n                        value={enteredData[\"RPW\"]}\r\n                        onChange={getEnteredData}\r\n                      />\r\n                    </Box>\r\n\r\n                    {!state.Data[\"info\"][3] ? (\r\n                      <Box\r\n                        className={classes.textRow}\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Button\r\n                          className={classes.successBtn}\r\n                          variant=\"outlined\"\r\n                          size=\"medium\"\r\n                          variant=\"outlined\"\r\n                          startIcon={<AddIcon />}\r\n                          type=\"submit\"\r\n                          onClick={createRawProduct}\r\n                        >\r\n                          Create Raw Product\r\n                        </Button>\r\n                        <Button\r\n                          className={classes.errorBtn}\r\n                          variant=\"outlined\"\r\n                          size=\"medium\"\r\n                          variant=\"outlined\"\r\n                          startIcon={<RotateLeftIcon />}\r\n                          onClick={reset}\r\n                        >\r\n                          Reset\r\n                        </Button>\r\n                      </Box>\r\n                    ) : (\r\n                      <Box\r\n                        className={classes.textRow}\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Button\r\n                          className={classes.infoBtn}\r\n                          variant=\"outlined\"\r\n                          size=\"medium\"\r\n                          variant=\"outlined\"\r\n                          startIcon={<AddIcon />}\r\n                          type=\"submit\"\r\n                          onClick={updateRawProduct}\r\n                        >\r\n                          Update Raw Product\r\n                        </Button>\r\n                      </Box>\r\n                    )}\r\n                  </Paper>\r\n                </Box>\r\n              </Grid>\r\n              {checkWidth > 768 && (\r\n                <>\r\n                  <Grid item xs={0} lg={2} md={1} xl={2} sm={0}></Grid>\r\n                  <Grid item xs={12} lg={5} md={6} xl={5} sm={7}>\r\n                    <RPPiChart />\r\n                  </Grid>\r\n                </>\r\n              )}\r\n            </Grid>\r\n          </Container>\r\n        </div>\r\n      </Container>\r\n\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n","export const FPColumns = {\r\n  Mobile: [\r\n    {\r\n      title: \"Sl No\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      width: 40,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"FPN\",\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      field: \"FPP\",\r\n      filtering: false,\r\n      width: 80,\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n  ],\r\n  Desk: [\r\n    {\r\n      title: \"Sl No\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      width: 40,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"FPN\",\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      field: \"FPD\",\r\n    },\r\n\r\n    {\r\n      title: \"Price\",\r\n      field: \"FPP\",\r\n      filtering: false,\r\n      width: 80,\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n  ],\r\n};\r\n","export const SRPColumns = {\r\n  Mobile: [\r\n    {\r\n      title: \"Name\",\r\n      field: \"RPN\",\r\n      filtering: false,\r\n    },\r\n\r\n    {\r\n      title: \"Quantity\",\r\n      field: \"RPQ\",\r\n      filtering: false,\r\n      width: 80,\r\n      cellStyle: {\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      field: \"RPP\",\r\n      filtering: false,\r\n      width: 80,\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n    {\r\n      title: \"Cost\",\r\n      field: \"RPC\",\r\n      filtering: false,\r\n      Cell: ({ row }) => <span>{row[\"Sqty\"] * row[\"Sprice\"]}</span>,\r\n      width: 100,\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n  ],\r\n  Desk: [\r\n    {\r\n      title: \"Name\",\r\n      field: \"RPN\",\r\n      width: \"60%\",\r\n    },\r\n\r\n    {\r\n      title: \"Quantity\",\r\n      field: \"RPQ\",\r\n      filtering: false,\r\n      width: \"10%\",\r\n      cellStyle: {\r\n        textAlign: \"center\",\r\n      },\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      field: \"RPP\",\r\n      filtering: false,\r\n      width: \"20%\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n    {\r\n      title: \"Cost\",\r\n      field: \"RPC\",\r\n      filtering: false,\r\n      width: \"30%\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n  ],\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, Slide, ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport MaterialTable from \"material-table\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport { Box, Button, Chip, Paper, Typography } from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\r\n\r\nimport { FPColumns } from \"../../Data/TabelFinalProduct\";\r\n\r\nimport { SRPColumns } from \"../../Data/TabelSelectedRawProduct\";\r\nimport { getAllFinalProduct } from \"../../Data/ProductsData\";\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nconst ownStyles = makeStyles({\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontWeight: 900,\r\n  },\r\n  TableTopRow: {\r\n    display: \"flex\",\r\n  },\r\n});\r\nconst myTheam = createTheme({\r\n  // palette: {\r\n  //   primary: {\r\n  //     main: purple[500],\r\n  //   },\r\n  //   secondary: {\r\n  //     main: \"#ff9100\",\r\n  //   },\r\n  //   type: \"light\",\r\n  // },\r\n  palette: {\r\n    primary: yellow,\r\n    secondary: {\r\n      main: \"#b71c1c\",\r\n    },\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nfunction FPView() {\r\n  const classes = ownStyles();\r\n  const [fProduct, setFProduct] = useState([]);\r\n  const [SRDetail, setSRDetail] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n  const getFinalProducts = async () => {\r\n    let da = await getAllFinalProduct().then((data) => data);\r\n\r\n    setFProduct(da[\"message\"]);\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFinalProducts();\r\n    return () => {\r\n      console.log(\"Cleaning Up\");\r\n    };\r\n  }, []);\r\n  const addValies = () => {\r\n    return fProduct.map((RProduct, nums) => {\r\n      const Data = {\r\n        ...RProduct,\r\n        slno: nums + 1,\r\n      };\r\n      return Data;\r\n    });\r\n  };\r\n\r\n  const getColumns = () => {\r\n    return window.innerWidth > 768 ? FPColumns.Desk : FPColumns.Mobile;\r\n  };\r\n  const getSRPColumns = () => {\r\n    return window.innerWidth > 768 ? SRPColumns.Desk : SRPColumns.Mobile;\r\n  };\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    getColumns();\r\n  });\r\n\r\n  const columns = getColumns();\r\n  const data = addValies();\r\n  const sRPColumns = getSRPColumns();\r\n\r\n  const noProduct = () => {\r\n    const Show = document.querySelector(\".rt-noData\");\r\n    if (Show) {\r\n      Show.innerHTML = \"<b>No Product Available</b>\";\r\n    }\r\n  };\r\n\r\n  const DeleteItems = async (ele, data) => {\r\n    console.log(data);\r\n    let del = window.confirm(\r\n      `Are you Sure you want to delete the Final Product \"${data[\"FPN\"]}\"`\r\n    );\r\n\r\n    if (del) {\r\n      await api.put(`dfp/${data[\"id\"]}`, data);\r\n      toast.error(\"Final Product Deleted from the system!\", {\r\n        position: \"top-right\",\r\n        autoClose: 2900,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n        transition: Slide,\r\n      });\r\n\r\n      setTimeout(() => {\r\n        toast.dismiss();\r\n      }, 3000);\r\n\r\n      const Element = document.querySelector(\".Toastify\");\r\n      const config = { childList: true, attributes: true };\r\n      const callBack = (ML, OB) => {\r\n        for (const m of ML) {\r\n          if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n            window.location.reload();\r\n          }\r\n        }\r\n      };\r\n      const Obser = new MutationObserver(callBack);\r\n\r\n      Obser.observe(Element, config);\r\n    }\r\n  };\r\n  let navigate = useNavigate();\r\n  const processProducts = async (element, data) => {\r\n    console.log(data);\r\n    const Data = [];\r\n    data[\"SRDetails\"].forEach((rd) => {\r\n      Data.push(JSON.stringify(rd));\r\n    });\r\n\r\n    let newData = {\r\n      PPN: data[\"FPN\"],\r\n      PPD: data[\"FPD\"],\r\n      PRM: Data.join(\"~\"),\r\n      PPP: data[\"FPP\"],\r\n    };\r\n\r\n    const response = await api.post(`anpp`, newData);\r\n    console.log(response);\r\n    if (response[\"data\"][\"code\"] === \"Exe\") {\r\n      toast.warning(\"This was already added to Process Products\", {\r\n        position: \"top-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n        transition: Slide,\r\n      });\r\n\r\n      const Element = document.querySelector(\".Toastify\");\r\n      const config = { childList: true, attributes: true };\r\n      const callBack = (ML, OB) => {\r\n        for (const m of ML) {\r\n          if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n            navigate(\"/fp\");\r\n          }\r\n        }\r\n      };\r\n      const Obser = new MutationObserver(callBack);\r\n\r\n      Obser.observe(Element, config);\r\n    } else {\r\n      toast.success(\"Final Product has been added to Process\", {\r\n        position: \"top-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: true,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"colored\",\r\n        transition: Slide,\r\n      });\r\n\r\n      const Element = document.querySelector(\".Toastify\");\r\n      const config = { childList: true, attributes: true };\r\n      const callBack = (ML, OB) => {\r\n        for (const m of ML) {\r\n          if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n            navigate(\"/fp\");\r\n          }\r\n        }\r\n      };\r\n      const Obser = new MutationObserver(callBack);\r\n\r\n      Obser.observe(Element, config);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      {noProduct()}\r\n      {/* <h1>HanUmaN</h1>\r\n      <h3>Pra</h3> */}\r\n\r\n      <ThemeProvider theme={myTheam}>\r\n        <div className=\"CheckHeader\">\r\n          <Container>\r\n            <Paper>\r\n              <Box\r\n                className={classes.TableTopRow}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n              >\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                  Final Materials\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                className={classes.TableTopRow}\r\n                justifyContent={\"space-between\"}\r\n                alignItems={\"center\"}\r\n              >\r\n                <Box>\r\n                  <Link\r\n                    to=\"/fp/add\"\r\n                    state={{\r\n                      Data: {\r\n                        data: \"a\",\r\n                        info: [\r\n                          \"Create New Final Product\",\r\n                          \"You can create a new final product which is not yet available in system. \\nNote: You cannot create raw product with same name.\",\r\n                          \"Add Final Product\",\r\n                          false,\r\n                        ],\r\n                      },\r\n                    }}\r\n                  >\r\n                    <Button color=\"secondary\" variant=\"outlined\" size=\"large\">\r\n                      Create Final Product\r\n                    </Button>\r\n                  </Link>\r\n                </Box>\r\n\r\n                <Box>\r\n                  <Chip\r\n                    className={classes.ClipCount}\r\n                    label={fProduct.length}\r\n                    color=\"secondary\"\r\n                  />\r\n                </Box>\r\n              </Box>\r\n            </Paper>\r\n            <Box>\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                title={\"\"}\r\n                isLoading={loading}\r\n                detailPanel={(rowDetails) => {\r\n                  console.log(rowDetails);\r\n                  return (\r\n                    <MaterialTable\r\n                      columns={sRPColumns}\r\n                      data={rowDetails[\"SRDetails\"]}\r\n                      title={\"\"}\r\n                      style={{ maxHeight: \"25vh\", overflow: \"scroll\" }}\r\n                      isLoading={loading}\r\n                      options={{\r\n                        // pageSize: 10,\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        addRowPosition: \"first\",\r\n                        actionsColumnIndex: -1,\r\n                        selection: false,\r\n                        showSelectAllCheckbox: false,\r\n                        showTextRowsSelected: false,\r\n                        columnsButton: false,\r\n                        header: true,\r\n                        padding: \"dense\",\r\n                        toolbarButtonAlignment: \"left\",\r\n                        search: false,\r\n                        grouping: true,\r\n                        paging: false,\r\n                        toolbar: false,\r\n                        // filterType: \"checkbox\",\r\n                      }}\r\n                    />\r\n                  );\r\n                }}\r\n                onRowClick={(evt, selectedRow, togglePannel) => (\r\n                  setSelectedRow(selectedRow.tableData.id), togglePannel()\r\n                )}\r\n                actions={[\r\n                  (rawData) => ({\r\n                    icon: () => (\r\n                      <Link\r\n                        to=\"/fp/update\"\r\n                        state={{\r\n                          Data: {\r\n                            data: rawData[0],\r\n                            info: [\r\n                              \"Update Final Product\",\r\n                              \"You can make changes to existing Final Products in system.\",\r\n                              \"Update Final Product\",\r\n                              true,\r\n                            ],\r\n                          },\r\n                        }}\r\n                      >\r\n                        <EditIcon />\r\n                      </Link>\r\n                    ),\r\n\r\n                    tooltip: \"Edit\",\r\n                    onClick: () => console.log(rawData),\r\n                  }),\r\n                  {\r\n                    icon: \"delete\",\r\n                    tooltip: \"Delete\",\r\n                    onClick: (e, data) => DeleteItems(e, data[0]),\r\n                  },\r\n                  {\r\n                    icon: () => <AccountTreeIcon />,\r\n                    tooltip: \"Send For Process\",\r\n                    onClick: (e, data) => processProducts(e, data[0]),\r\n                  },\r\n                ]}\r\n                options={{\r\n                  pageSize: 10,\r\n                  filtering: false,\r\n                  exportButton: false,\r\n                  addRowPosition: \"first\",\r\n                  actionsColumnIndex: -1,\r\n                  selection: true,\r\n                  showSelectAllCheckbox: false,\r\n                  showTextRowsSelected: false,\r\n                  columnsButton: true,\r\n                  header: true,\r\n                  padding: \"dense\",\r\n                  toolbarButtonAlignment: \"left\",\r\n                  rowStyle: (rowData) => ({\r\n                    backgroundColor:\r\n                      selectedRow === rowData.tableData.id ? \"#fff59d\" : \"#FFF\",\r\n                  }),\r\n                }}\r\n              />\r\n            </Box>\r\n          </Container>\r\n        </div>\r\n      </ThemeProvider>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FPView;\r\n","import React from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport PrintIcon from \"@material-ui/icons/Print\";\r\nimport { jsPDF } from \"jspdf\";\r\n\r\nexport default function DownloadPDF({ data }) {\r\n  const downloadAsPDFN = () => {\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, \"0\");\r\n    var mm = String(today.getMonth() + 1).padStart(2, \"0\");\r\n    var yyyy = today.getFullYear();\r\n\r\n    today = mm + \"/\" + dd + \"/\" + yyyy;\r\n    const PDF = new jsPDF();\r\n\r\n    PDF.text(\"Company Name\", 105, 16, null, null, \"center\");\r\n    PDF.text(\"Address1\", 105, 21, null, null, \"center\");\r\n    PDF.text(\"Address2\", 105, 26, null, null, \"center\");\r\n    PDF.text(\"Address3\", 105, 31, null, null, \"center\");\r\n    PDF.text(\"Address3\", 105, 31, null, null, \"center\");\r\n    PDF.text(`Date: ${today}`, 200, 40, null, null, \"right\");\r\n    PDF.line(250, 43, 0, 43);\r\n    PDF.text(\"Description\", 57, 52, null, null, \"center\");\r\n    PDF.text(\"Quantity\", 133, 52, null, null, \"center\");\r\n    PDF.line(120, 43, 120, (13 + 1.29) * 14);\r\n    PDF.text(\"Price\", 165, 52, null, null, \"center\");\r\n    PDF.line(150, 43, 150, (13 + 1.29) * 14);\r\n    PDF.text(\"Amount\", 190, 52, null, null, \"center\");\r\n    PDF.line(250, 55, 0, 55);\r\n    PDF.line(179, 43, 179, 300);\r\n    PDF.line(25, 43, 25, 300);\r\n    PDF.text(`${data[\"PPN\"]}`, 30, 61, null, null, \"left\");\r\n    PDF.line(179, 63, 25, 63);\r\n    data.PPL.forEach((pdfda, index) => {\r\n      PDF.text(`${index + 1}`, 16, 70 + index * 10, null, null, \"left\");\r\n      PDF.text(`${pdfda[\"RPN\"]}`, 34, 70 + index * 10, null, null, \"left\");\r\n      PDF.text(`${pdfda[\"RPQ\"]}`, 130, 70 + index * 10, null, null, \"left\");\r\n      PDF.text(`${pdfda[\"RPP\"]}`, 160, 70 + index * 10, null, null, \"left\");\r\n      PDF.text(`${pdfda[\"RPC\"]}`, 192, 70 + index * 10, null, null, \"left\");\r\n    });\r\n\r\n    PDF.line(220, 13 * 15.5, 25, 13 * 15.5);\r\n    PDF.text(\"Total\", 160, (13 + 2) * 14, null, null, \"center\");\r\n    PDF.text(`${data[\"PPP\"]}`, 192, (13 + 2) * 14, null, null, \"center\");\r\n\r\n    PDF.save(`CompanyName_${today}.pdf`);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton onClick={downloadAsPDFN}>\r\n        <PrintIcon />\r\n      </IconButton>\r\n    </>\r\n  );\r\n}\r\n","import DownloadPDF from \"../Components/DownloadPDF\";\r\n\r\nexport const PPColumns = {\r\n  Mobile: [\r\n    {\r\n      title: \"Sl No\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      width: 40,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"PPN\",\r\n    },\r\n\r\n    {\r\n      title: \"Price\",\r\n      field: \"PPP\",\r\n      filtering: false,\r\n      width: 80,\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n\r\n    {\r\n      title: \"Action\",\r\n\r\n      filtering: false,\r\n      editable: \"never\",\r\n      render: (rowData) => <DownloadPDF data={rowData} />,\r\n    },\r\n  ],\r\n  Desk: [\r\n    {\r\n      title: \"Sl No\",\r\n      field: \"slno\",\r\n      filtering: false,\r\n      width: 40,\r\n      editable: \"never\",\r\n    },\r\n    {\r\n      title: \"Name\",\r\n      field: \"PPN\",\r\n    },\r\n    {\r\n      title: \"Description\",\r\n      field: \"PPD\",\r\n    },\r\n\r\n    {\r\n      title: \"Price\",\r\n      field: \"PPP\",\r\n      filtering: false,\r\n      width: 80,\r\n      editable: \"never\",\r\n      type: \"currency\",\r\n      currencySetting: { currencyCode: \"AED\" },\r\n    },\r\n\r\n    {\r\n      title: \"Action\",\r\n\r\n      filtering: false,\r\n      editable: \"never\",\r\n      render: (rowData) => <DownloadPDF data={rowData} />,\r\n    },\r\n  ],\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport MaterialTable from \"material-table\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport { Box, Paper, Typography } from \"@material-ui/core\";\r\n\r\nimport { PPColumns } from \"../../Data/TabelProcessProduct\";\r\n\r\nimport { SRPColumns } from \"../../Data/TabelSelectedRawProduct\";\r\nimport { getAllProcessProdct } from \"../../Data/ProductsData\";\r\n\r\nconst ownStyles = makeStyles({\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontWeight: 900,\r\n  },\r\n  TableTopRow: {\r\n    display: \"flex\",\r\n  },\r\n});\r\nconst myTheam = createTheme({\r\n  // palette: {\r\n  //   primary: {\r\n  //     main: purple[500],\r\n  //   },\r\n  //   secondary: {\r\n  //     main: \"#ff9100\",\r\n  //   },\r\n  //   type: \"light\",\r\n  // },\r\n  palette: {\r\n    primary: yellow,\r\n    secondary: {\r\n      main: \"#b71c1c\",\r\n    },\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nfunction PPView() {\r\n  const classes = ownStyles();\r\n\r\n  const [PProducts, setPProducts] = useState([]);\r\n  const [loading, setloading] = useState(true);\r\n\r\n  const getProcessedProducts = async () => {\r\n    let da = await getAllProcessProdct().then((data) => data);\r\n\r\n    setPProducts(da[\"message\"]);\r\n    setloading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getProcessedProducts();\r\n\r\n    return () => {\r\n      console.log(\"Cleaning Up\");\r\n    };\r\n  }, []);\r\n  const addValies = () => {\r\n    return PProducts.map((PProduct, nums) => {\r\n      const Data = {\r\n        ...PProduct,\r\n        slno: nums + 1,\r\n      };\r\n      return Data;\r\n    });\r\n  };\r\n\r\n  const getColumns = () => {\r\n    return window.innerWidth > 768 ? PPColumns.Desk : PPColumns.Mobile;\r\n  };\r\n  const getSRPColumns = () => {\r\n    return window.innerWidth > 768 ? SRPColumns.Desk : SRPColumns.Mobile;\r\n  };\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    getColumns();\r\n  });\r\n\r\n  const columns = getColumns();\r\n  const data = addValies();\r\n  const sRPColumns = getSRPColumns();\r\n\r\n  const noProduct = () => {\r\n    const Show = document.querySelector(\".rt-noData\");\r\n    if (Show) {\r\n      Show.innerHTML = \"<b>No Product Available</b>\";\r\n    }\r\n  };\r\n\r\n  let navigate = useNavigate();\r\n\r\n  return (\r\n    <>\r\n      {noProduct()}\r\n      {/* <h1>HanUmaN</h1>\r\n      <h3>Pra</h3> */}\r\n\r\n      <ThemeProvider theme={myTheam}>\r\n        <div className=\"CheckHeader\">\r\n          <Container>\r\n            <Paper>\r\n              <Box\r\n                className={classes.TableTopRow}\r\n                justifyContent={\"center\"}\r\n                alignItems={\"center\"}\r\n              >\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                  Process Products\r\n                </Typography>\r\n              </Box>\r\n            </Paper>\r\n            <Box>\r\n              <MaterialTable\r\n                columns={columns}\r\n                data={data}\r\n                title={\"\"}\r\n                isLoading={loading}\r\n                detailPanel={(rowDetails) => {\r\n                  return (\r\n                    <MaterialTable\r\n                      columns={sRPColumns}\r\n                      data={rowDetails[\"PPL\"]}\r\n                      title={\"\"}\r\n                      style={{ maxHeight: \"25vh\", overflow: \"scroll\" }}\r\n                      isLoading={loading}\r\n                      options={{\r\n                        // pageSize: 10,\r\n                        filtering: false,\r\n                        exportButton: false,\r\n                        addRowPosition: \"first\",\r\n                        actionsColumnIndex: -1,\r\n                        selection: false,\r\n                        showSelectAllCheckbox: false,\r\n                        showTextRowsSelected: false,\r\n                        columnsButton: false,\r\n                        header: true,\r\n                        padding: \"dense\",\r\n                        toolbarButtonAlignment: \"left\",\r\n                        search: false,\r\n                        grouping: true,\r\n                        paging: false,\r\n                        toolbar: false,\r\n                        // filterType: \"checkbox\",\r\n                      }}\r\n                    />\r\n                  );\r\n                }}\r\n                onRowClick={(e, rowData, togglePannel) => togglePannel()}\r\n                options={{\r\n                  pageSize: 10,\r\n                  filtering: false,\r\n                  exportButton: false,\r\n                  addRowPosition: \"first\",\r\n                  actionsColumnIndex: -1,\r\n                  selection: true,\r\n                  showSelectAllCheckbox: false,\r\n                  showTextRowsSelected: false,\r\n                  columnsButton: true,\r\n                  header: true,\r\n                  padding: \"dense\",\r\n                  toolbarButtonAlignment: \"left\",\r\n                  // filterType: \"checkbox\",\r\n                }}\r\n              />\r\n            </Box>\r\n          </Container>\r\n        </div>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PPView;\r\n","import React from \"react\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport clsx from \"clsx\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\n\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\n\r\nconst customTheam = createTheme({\r\n  palette: {\r\n    type: \"light\",\r\n  },\r\n});\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n  appBottomMargin: {\r\n    marginBottom: 100,\r\n  },\r\n}));\r\n\r\nfunction NavBar() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const Path = useNavigate();\r\n  const links = [\r\n    // {\r\n    //   title: \"Home\",\r\n    //   icon: \"\",\r\n    //   path: \"/\",\r\n    // },\r\n    {\r\n      title: \"Dashboard\",\r\n      icon: \"\",\r\n      path: \"/dashboard\",\r\n    },\r\n    {\r\n      title: \"Raw Products\",\r\n      icon: \"\",\r\n      path: \"/rp\",\r\n    },\r\n    {\r\n      title: \"Final Products\",\r\n      icon: \"\",\r\n      path: \"/fp\",\r\n    },\r\n    {\r\n      title: \"View Process Products\",\r\n      icon: \"\",\r\n      path: \"/vpp\",\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={customTheam}>\r\n        <AppBar\r\n          position=\"fixed\"\r\n          className={\r\n            (clsx(classes.appBar, {\r\n              [classes.appBarShift]: open,\r\n            }),\r\n            classes.appBottomMargin)\r\n          }\r\n        >\r\n          <Toolbar>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              edge=\"start\"\r\n              className={clsx(classes.menuButton, open && classes.hide)}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" noWrap>\r\n              Company Name\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"persistent\"\r\n          anchor=\"left\"\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n        >\r\n          <div className={classes.drawerHeader}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              {theme.direction === \"ltr\" ? (\r\n                <ChevronLeftIcon />\r\n              ) : (\r\n                <ChevronRightIcon />\r\n              )}\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            {links.map((a, i) => (\r\n              <ListItem\r\n                key={i}\r\n                button\r\n                onClick={() => {\r\n                  Path(a.path);\r\n                  handleDrawerClose();\r\n                }}\r\n              >\r\n                <ListItemText primary={a.title} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\r\n\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  grey,\r\n  lightGreen,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\n\r\nconst classes = {\r\n  textRow: {\r\n    display: \"flex\",\r\n  },\r\n  newIcon: {\r\n    backgroundColor: teal[100],\r\n    color: deepOrange[900],\r\n    // border: `1px solid ${teal[900]}`,\r\n    borderRadius: \"20px\",\r\n    fontWeight: 700,\r\n  },\r\n  btnChipM: {\r\n    padding: 1,\r\n    color: red[700],\r\n    PointerEvent: \"auto\",\r\n  },\r\n  btnChipP: {\r\n    padding: 1,\r\n    color: green[700],\r\n    PointerEvent: \"auto\",\r\n  },\r\n  btnChip: {\r\n    padding: 1,\r\n    PointerEvent: \"auto\",\r\n  },\r\n  btnRow: {\r\n    display: \"flex\",\r\n    // backgroundColor: teal[100],\r\n    justifyContent: \"space-between\",\r\n    border: `0.1px solid ${grey[600]}`,\r\n    borderRadius: \"50px\",\r\n    width: \"90px\",\r\n  },\r\n  btninput: {\r\n    width: \"33px\",\r\n    display: \"inline-block\",\r\n    border: \"0px\",\r\n    textAlign: \"center\",\r\n  },\r\n};\r\n\r\nexport class ButtonIncDec extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      prData: [],\r\n      defultData: {},\r\n      availableQty: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const defultData = {};\r\n    defultData[this.props.data.id] = this.props.currentNRPQ\r\n      ? parseInt(this.props.currentNRPQ)\r\n      : 1;\r\n\r\n    this.setState({ defultData, availableQty: this.props.data.RPQ - 1 });\r\n  }\r\n\r\n  changeReqQty = (e) => {\r\n    const defultData = {};\r\n    defultData[e.target.name] = parseInt(e.target.value);\r\n    this.setState({ defultData });\r\n  };\r\n\r\n  incrimentReqQty = (e, id) => {\r\n    this.setState((prev) => {\r\n      let selected = (this.state.defultData[id] = prev.defultData[id] + 1);\r\n      return selected;\r\n    });\r\n  };\r\n\r\n  decrimentReqQty = (e, id) => {\r\n    this.setState((prev) => {\r\n      let selected = (this.state.defultData[id] = prev.defultData[id] - 1);\r\n      return selected;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.props.Where === \"IDBTN\" ? (\r\n          <span>\r\n            <div style={classes.btnRow}>\r\n              <span className=\"Pr-Chip-\">\r\n                <div className=\"Pr-Chip-Btn\" id={this.props.data.id}>\r\n                  <IconButton\r\n                    style={\r\n                      this.state.defultData[this.props.data.id] <= 1\r\n                        ? classes.btnChip\r\n                        : classes.btnChipM\r\n                    }\r\n                    onClick={(e) => this.decrimentReqQty(e, this.props.data.id)}\r\n                    disabled={\r\n                      this.state.defultData[this.props.data.id] <= 1\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  >\r\n                    <RemoveCircleOutlineIcon />\r\n                  </IconButton>\r\n                </div>\r\n              </span>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  width: \"20%\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"center\",\r\n                }}\r\n              >\r\n                <input\r\n                  name={this.props.data.RPN}\r\n                  id={this.props.InputID}\r\n                  type=\"number\"\r\n                  max={this.props.data.RPQ}\r\n                  min={1}\r\n                  style={classes.btninput}\r\n                  value={this.state.defultData[this.props.data.id]}\r\n                  onChange={(e) => this.changeReqQty(e)}\r\n                />\r\n              </div>\r\n              <span className=\"Pr-Chip-\">\r\n                <div className=\"Pr-Chip-Btn\" id={this.props.data.id}>\r\n                  <IconButton\r\n                    id={\"Name\"}\r\n                    style={\r\n                      this.state.defultData[this.props.data.id] >=\r\n                      this.props.data.RPQ\r\n                        ? classes.btnChip\r\n                        : classes.btnChipP\r\n                    }\r\n                    onClick={(e) => this.incrimentReqQty(e, this.props.data.id)}\r\n                    disabled={\r\n                      this.state.defultData[this.props.data.id] >=\r\n                      this.props.data.RPQ\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  >\r\n                    <AddCircleOutlineIcon />\r\n                  </IconButton>\r\n                </div>\r\n              </span>\r\n            </div>\r\n          </span>\r\n        ) : (\r\n          <span></span>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ButtonIncDec;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, ToastContainer, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport { getAllRawProduct, getAllFinalProduct } from \"../../Data/ProductsData\";\r\nimport {\r\n  Box,\r\n  Chip,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport Cancel from \"@material-ui/icons/Cancel\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  grey,\r\n  lightGreen,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport ButtonIncDec from \"../BttonIncDec\";\r\n\r\nconst OwnStyles = makeStyles((theam) => ({\r\n  successBtn: {\r\n    borderColor: theam.palette.success.dark,\r\n    color: theam.palette.success.dark,\r\n  },\r\n  errorBtn: {\r\n    borderColor: theam.palette.error.dark,\r\n    color: theam.palette.error.dark,\r\n  },\r\n  infoBtn: {\r\n    borderColor: theam.palette.info.dark,\r\n    color: theam.palette.info.dark,\r\n  },\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontSize: theam.typography.caption.fontSize,\r\n    backgroundColor: theam.palette.info.main,\r\n    paddingLeft: 1,\r\n  },\r\n  textRow: {\r\n    display: \"flex\",\r\n  },\r\n  infoChip: {\r\n    backgroundColor: teal[100],\r\n    color: teal[900],\r\n    border: `1px solid ${teal[900]}`,\r\n    fontWeight: 700,\r\n  },\r\n  newIcon: {\r\n    backgroundColor: teal[100],\r\n    color: deepOrange[900],\r\n\r\n    borderRadius: \"20px\",\r\n    fontWeight: 700,\r\n  },\r\n  btnChip: {\r\n    padding: 5,\r\n  },\r\n  btnRow: {\r\n    width: \"100px\",\r\n  },\r\n  btninput: {\r\n    width: \"33px\",\r\n    display: \"inline-block\",\r\n    border: \"0px\",\r\n  },\r\n  icon: {\r\n    \"&.MuiChip-deleteIcon\": {\r\n      color: red[\"A700\"],\r\n    },\r\n  },\r\n  iconS: {\r\n    \"&.MuiChip-deleteIcon\": {\r\n      color: green[\"A700\"],\r\n    },\r\n  },\r\n  iconGreen: {\r\n    backgroundColor: green[100],\r\n    color: grey[900],\r\n    fontWeight: 900,\r\n  },\r\n  iconOrange: {\r\n    backgroundColor: orange[500],\r\n    color: \"white\",\r\n    fontWeight: 900,\r\n  },\r\n  iconGreenOut: {\r\n    borderColor: green[500],\r\n    fontWeight: 900,\r\n  },\r\n  iconOrangeOut: {\r\n    borderColor: orange[500],\r\n    fontWeight: 900,\r\n  },\r\n  iconRedOut: {\r\n    borderColor: red[500],\r\n    fontWeight: 900,\r\n  },\r\n  paddingZero: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nconst ownTheam = createTheme({\r\n  // palette: {\r\n  //   type: \"dark\",\r\n  // },\r\n});\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nexport default function FProductAEM() {\r\n  const classes = OwnStyles();\r\n  let InnerWidth = () => window.innerWidth;\r\n  const [checkWidth, setCheckWidth] = useState(InnerWidth);\r\n  const [enteredData, setEnteredData] = useState({\r\n    FPN: \"\",\r\n    FPD: \"\",\r\n  });\r\n  const [fProduct, setFProduct] = useState([]);\r\n  const [rProduct, setRProduct] = useState([]);\r\n  const [zeroRawProduct, setZeroRawProduct] = useState([]);\r\n\r\n  let checkLength = () => {\r\n    if (rProduct.length >= 1 && zeroRawProduct.length >= 1) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  function getEnteredData(e) {\r\n    let Name = e.target.name;\r\n    let Value = e.target.value;\r\n    setEnteredData((prevState) => ({\r\n      ...prevState,\r\n      [Name]: Value,\r\n    }));\r\n  }\r\n\r\n  const getRPData = async () => {\r\n    let da = await getAllRawProduct().then((data) => data);\r\n\r\n    const RPProductsC = [];\r\n    const RPProductsZ = [];\r\n    da.message.forEach((data) => {\r\n      if (!data[\"RPQ\"] <= 0) {\r\n        RPProductsC.push(data);\r\n      } else {\r\n        RPProductsZ.push(data);\r\n      }\r\n    });\r\n    setRProduct(RPProductsC);\r\n    setZeroRawProduct(RPProductsZ);\r\n  };\r\n\r\n  const getFPData = async () => {\r\n    let da = await getAllFinalProduct().then((data) => data);\r\n    console.log(da);\r\n    setFProduct(da.message);\r\n  };\r\n\r\n  const changeRawProductQty = (data, SelData) => {\r\n    let qty = document.querySelectorAll(\"#QtyValue\");\r\n\r\n    qty.forEach((da, dda) => {\r\n      if (data[\"RPN\"] == da[\"name\"]) {\r\n        SelData[\"NRPQ\"] = da.value;\r\n\r\n        return SelData;\r\n      }\r\n    });\r\n  };\r\n\r\n  const [selectedProduct, setSelectedProduct] = useState([]);\r\n\r\n  const onCheckedItem = (a, data) => {\r\n    console.log(data);\r\n    console.log(data[\"RPQ\"] >= 1);\r\n\r\n    let selData = rProduct.filter((obj) => obj.id === data.id);\r\n    let newData = rProduct.filter((obj) => obj.id !== data.id);\r\n    let values = changeRawProductQty(data, selData[0]);\r\n    // console.log(selData[0]);\r\n\r\n    setRProduct(newData);\r\n    setSelectedProduct([...selectedProduct, selData[0]]);\r\n\r\n    // }\r\n  };\r\n\r\n  const deleteSelProduct = (b, data) => {\r\n    let selData = selectedProduct.filter((obj) => obj.id === data.id);\r\n    let newData = selectedProduct.filter((obj) => obj.id !== data.id);\r\n\r\n    let changeData = rProduct;\r\n\r\n    changeData.push(selData[0]);\r\n    setRProduct(changeData);\r\n    setSelectedProduct(newData);\r\n  };\r\n\r\n  const { state } = useLocation();\r\n  let navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    getRPData();\r\n    getFPData();\r\n    return () => {\r\n      console.log(\"Cleaned Up!\");\r\n    };\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setEnteredData({\r\n      FPN: \"\",\r\n      FPD: \"\",\r\n    });\r\n    getRPData();\r\n    setSelectedProduct([]);\r\n  };\r\n\r\n  const createProduct = async () => {\r\n    let newData = {\r\n      FPN: enteredData[\"FPN\"],\r\n      FPD: enteredData[\"FPD\"],\r\n      FRM: selectedProduct,\r\n    };\r\n\r\n    const response = await api.post(`anfp`, newData);\r\n\r\n    if (response.data.code.split(\"|\")[0] === \"Recover\") {\r\n      const btn = document.createElement(\"button\");\r\n\r\n      btn.textContent = \"Recover\";\r\n      const dun = recoverRawProduct;\r\n      btn.addEventListener(\"click\", function () {\r\n        dun(response.data.code.split(\"|\")[1]);\r\n      });\r\n      document.querySelector(\"#btns\").appendChild(btn);\r\n    }\r\n    getRPData();\r\n    toast.success(\"Final Product Created in the system!\", {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"colored\",\r\n      delay: 500,\r\n      transition: Slide,\r\n    });\r\n    reset();\r\n    getFPData();\r\n  };\r\n\r\n  const updateRawProduct = async () => {\r\n    await api.put(`urp/${enteredData[\"id\"]}`, enteredData);\r\n    getRPData();\r\n\r\n    toast.info(\"Changes has been made to Raw Product\", {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"colored\",\r\n      transition: Slide,\r\n    });\r\n\r\n    const Element = document.querySelector(\".Toastify\");\r\n    const config = { childList: true, attributes: true };\r\n    const callBack = (ML, OB) => {\r\n      for (const m of ML) {\r\n        if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n          navigate(\"/rp\");\r\n        }\r\n      }\r\n    };\r\n    const Obser = new MutationObserver(callBack);\r\n\r\n    Obser.observe(Element, config);\r\n    getFPData();\r\n  };\r\n\r\n  const recoverRawProduct = async (_id) => {\r\n    await api.put(`rrp/${_id}`);\r\n    getRPData();\r\n    reset();\r\n  };\r\n\r\n  const goBack = () => navigate(\"/fp\");\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    setCheckWidth(InnerWidth);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={ownTheam}>\r\n        <Box\r\n          component={checkWidth > 500 ? Container : \"\"}\r\n          style={\r\n            checkWidth > 1280\r\n              ? { maxWidth: \"50%\" }\r\n              : checkWidth > 960\r\n              ? { maxWidth: \"70%\" }\r\n              : { maxWidth: \"100%\" }\r\n          }\r\n        >\r\n          <div className=\"CheckHeader\">\r\n            <Box component={checkWidth > 500 ? Container : \"\"}>\r\n              <Grid container>\r\n                <Grid item xs={12} lg={12} md={12} xl={12} sm={12}>\r\n                  <Box>\r\n                    <Paper>\r\n                      <Box\r\n                        className={classes.textRow}\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Typography variant=\"h5\" component={\"h6\"}>\r\n                          {state.Data[\"info\"][0]}\r\n                        </Typography>\r\n                        {!state.Data[\"info\"][3] ? (\r\n                          <Chip\r\n                            className={classes.infoChip}\r\n                            label={`View: ${fProduct.length}`}\r\n                            size=\"small\"\r\n                            clickable={true}\r\n                            onClick={goBack}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        ) : (\r\n                          <Chip\r\n                            className={classes.infoChip}\r\n                            label={`Edit for: ${enteredData[\"FPN\"]}`}\r\n                            size=\"small\"\r\n                            clickable={true}\r\n                            onClick={goBack}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" component={\"p\"}>\r\n                          {state.Data[\"info\"][1]}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <TextField\r\n                          id=\"outlined-basic\"\r\n                          label=\"Name\"\r\n                          required\r\n                          autoComplete=\"off\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          name=\"FPN\"\r\n                          value={enteredData[\"FPN\"]}\r\n                          onChange={getEnteredData}\r\n                        />\r\n                        <TextField\r\n                          id=\"outlined-basic\"\r\n                          label=\"Description\"\r\n                          required\r\n                          autoComplete=\"off\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          name=\"FPD\"\r\n                          value={enteredData[\"FPD\"]}\r\n                          onChange={getEnteredData}\r\n                        />\r\n                      </Box>\r\n                      <Box style={{ userSelect: \"none\" }}>\r\n                        <Grid container>\r\n                          <Grid item xs={12} lg={6} md={12} xl={6} sm={12}>\r\n                            <Box\r\n                              style={{ maxHeight: \"30vh\", overflow: \"scroll\" }}\r\n                            >\r\n                              <Chip\r\n                                label={selectedProduct.length}\r\n                                size=\"small\"\r\n                                style={{ float: \"right\", marginRight: 10 }}\r\n                              />\r\n                              {selectedProduct.length >= 1 && (\r\n                                <TableContainer component={Paper}>\r\n                                  <Table padding=\"checkbox\">\r\n                                    <TableHead>\r\n                                      <TableRow>\r\n                                        <TableCell align=\"center\">#</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Name\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Sel Qty\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                          Price\r\n                                        </TableCell>\r\n                                      </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {selectedProduct.map((sp, spI) => (\r\n                                        <TableRow key={sp[\"id\"]}>\r\n                                          {console.log(sp)}\r\n                                          <TableCell>{spI + 1}</TableCell>\r\n                                          <TableCell>\r\n                                            <Chip\r\n                                              className={classes.iconOrangeOut}\r\n                                              label={sp.RPN}\r\n                                              variant=\"outline\"\r\n                                              clickable\r\n                                              onDelete={(e) =>\r\n                                                deleteSelProduct(e, sp)\r\n                                              }\r\n                                              deleteIcon={\r\n                                                <Cancel\r\n                                                  className={classes.icon}\r\n                                                />\r\n                                              }\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              label={`${sp[\"NRPQ\"]}`}\r\n                                              className={classes.iconOrangeOut}\r\n                                              variant=\"outline\"\r\n                                              size=\"small\"\r\n                                            />\r\n                                          </TableCell>\r\n\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              label={sp[\"NRPQ\"] * sp[\"RPP\"]}\r\n                                              className={classes.iconOrangeOut}\r\n                                              variant=\"outline\"\r\n                                              size=\"small\"\r\n                                            />\r\n                                          </TableCell>\r\n                                        </TableRow>\r\n                                      ))}\r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              )}\r\n                            </Box>\r\n                          </Grid>\r\n\r\n                          <Box style={{ height: \"10px\" }}></Box>\r\n\r\n                          {rProduct.length >= 1 && (\r\n                            <Grid item xs={12} lg={6} md={12} xl={6} sm={12}>\r\n                              <Box\r\n                                style={{\r\n                                  maxHeight: \"30vh\",\r\n                                  overflow: \"scroll\",\r\n                                }}\r\n                              >\r\n                                <TableContainer component={Paper} style={{}}>\r\n                                  <Table padding=\"checkbox\">\r\n                                    <TableHead>\r\n                                      <TableRow>\r\n                                        <TableCell align=\"center\">\r\n                                          Name\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Req Qty\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Ava Qty\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Price\r\n                                        </TableCell>\r\n                                      </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {rProduct.map((rp, rpI) => (\r\n                                        <TableRow key={rp[\"id\"]}>\r\n                                          <TableCell>\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              elevation={1}\r\n                                              label={rp.RPN}\r\n                                              variant=\"outline\"\r\n                                              clickable\r\n                                              onDelete={(e) =>\r\n                                                onCheckedItem(e, rp)\r\n                                              }\r\n                                              deleteIcon={\r\n                                                <CheckCircleOutlineIcon\r\n                                                  className={classes.iconS}\r\n                                                />\r\n                                              }\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <ButtonIncDec\r\n                                              data={rp}\r\n                                              currentNRPQ={1}\r\n                                              Where=\"IDBTN\"\r\n                                              InputID=\"QtyValue\"\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              label={rp.RPQ}\r\n                                              size=\"small\"\r\n                                              variant=\"outline\"\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              label={rp.RPP}\r\n                                              size=\"small\"\r\n                                              variant=\"outline\"\r\n                                            />\r\n                                          </TableCell>\r\n                                        </TableRow>\r\n                                      ))}\r\n                                      {zeroRawProduct.length >= 1 &&\r\n                                        zeroRawProduct.map((zp, zpI) => (\r\n                                          <>\r\n                                            <Divider />\r\n                                            <TableRow key={zp[\"id\"]}>\r\n                                              <TableCell>\r\n                                                <Chip\r\n                                                  elevation={1}\r\n                                                  label={zp.RPN}\r\n                                                  variant=\"outline\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  className={classes.iconRedOut}\r\n                                                />\r\n                                              </TableCell>\r\n                                              <TableCell align=\"center\"></TableCell>\r\n                                              <TableCell align=\"center\">\r\n                                                <Chip\r\n                                                  className={classes.iconRedOut}\r\n                                                  label={zp.RPQ}\r\n                                                  size=\"small\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  variant=\"outline\"\r\n                                                />\r\n                                              </TableCell>\r\n                                              <TableCell align=\"center\">\r\n                                                <Chip\r\n                                                  className={classes.iconRedOut}\r\n                                                  label={zp.RPP}\r\n                                                  size=\"small\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  variant=\"outline\"\r\n                                                />\r\n                                              </TableCell>\r\n                                            </TableRow>\r\n                                          </>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              </Box>\r\n                            </Grid>\r\n                          )}\r\n                        </Grid>\r\n                      </Box>\r\n                      {!state.Data[\"info\"][3] ? (\r\n                        <Box\r\n                          className={classes.textRow}\r\n                          justifyContent=\"space-between\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Button\r\n                            className={classes.successBtn}\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            variant=\"outlined\"\r\n                            startIcon={<AddIcon />}\r\n                            type=\"submit\"\r\n                            onClick={createProduct}\r\n                          >\r\n                            Add Final Product\r\n                          </Button>\r\n                          <Button\r\n                            className={classes.errorBtn}\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            variant=\"outlined\"\r\n                            startIcon={<RotateLeftIcon />}\r\n                            onClick={reset}\r\n                          >\r\n                            Reset\r\n                          </Button>\r\n                        </Box>\r\n                      ) : (\r\n                        <Box\r\n                          className={classes.textRow}\r\n                          justifyContent=\"center\"\r\n                          alignItems=\"center\"\r\n                        >\r\n                          <Button\r\n                            className={classes.infoBtn}\r\n                            variant=\"outlined\"\r\n                            size=\"medium\"\r\n                            variant=\"outlined\"\r\n                            startIcon={<AddIcon />}\r\n                            type=\"submit\"\r\n                            onClick={updateRawProduct}\r\n                          >\r\n                            {state.Data[\"info\"][2]}\r\n                          </Button>\r\n                        </Box>\r\n                      )}\r\n                    </Paper>\r\n                  </Box>\r\n                </Grid>\r\n                {checkWidth > 768 && (\r\n                  <>\r\n                    <Grid item xs={0} lg={2} md={1} xl={2} sm={0}></Grid>\r\n                    <Grid item xs={12} lg={5} md={6} xl={5} sm={7}></Grid>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </Box>\r\n          </div>\r\n        </Box>\r\n      </ThemeProvider>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { toast, ToastContainer, Slide } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nimport {\r\n  getAllRawProduct,\r\n  getAllFinalProduct,\r\n  getOneFinalProduct,\r\n} from \"../../Data/ProductsData\";\r\nimport {\r\n  Box,\r\n  Chip,\r\n  Container,\r\n  Divider,\r\n  Grid,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Button,\r\n  TableContainer,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport CheckCircleOutlineIcon from \"@material-ui/icons/CheckCircleOutline\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport Cancel from \"@material-ui/icons/Cancel\";\r\nimport {\r\n  deepOrange,\r\n  green,\r\n  grey,\r\n  lightGreen,\r\n  orange,\r\n  purple,\r\n  red,\r\n  teal,\r\n  yellow,\r\n} from \"@material-ui/core/colors\";\r\nimport {\r\n  createTheme,\r\n  makeStyles,\r\n  ThemeProvider,\r\n} from \"@material-ui/core/styles\";\r\nimport ButtonIncDec from \"../BttonIncDec\";\r\n\r\nconst OwnStyles = makeStyles((theam) => ({\r\n  successBtn: {\r\n    borderColor: theam.palette.success.dark,\r\n    color: theam.palette.success.dark,\r\n  },\r\n  errorBtn: {\r\n    borderColor: theam.palette.error.dark,\r\n    color: theam.palette.error.dark,\r\n  },\r\n  infoBtn: {\r\n    borderColor: theam.palette.info.dark,\r\n    color: theam.palette.info.dark,\r\n  },\r\n  ClipCount: {\r\n    color: \"#fff\",\r\n    fontSize: theam.typography.caption.fontSize,\r\n    backgroundColor: theam.palette.info.main,\r\n    paddingLeft: 1,\r\n  },\r\n  textRow: {\r\n    display: \"flex\",\r\n  },\r\n  infoChip: {\r\n    backgroundColor: teal[100],\r\n    color: teal[900],\r\n    border: `1px solid ${teal[900]}`,\r\n    fontWeight: 700,\r\n  },\r\n  newIcon: {\r\n    backgroundColor: teal[100],\r\n    color: deepOrange[900],\r\n\r\n    borderRadius: \"20px\",\r\n    fontWeight: 700,\r\n  },\r\n  btnChip: {\r\n    padding: 5,\r\n  },\r\n  btnRow: {\r\n    width: \"100px\",\r\n  },\r\n  btninput: {\r\n    width: \"33px\",\r\n    display: \"inline-block\",\r\n    border: \"0px\",\r\n  },\r\n  icon: {\r\n    \"&.MuiChip-deleteIcon\": {\r\n      color: red[\"A700\"],\r\n    },\r\n  },\r\n  iconS: {\r\n    \"&.MuiChip-deleteIcon\": {\r\n      color: green[\"A700\"],\r\n    },\r\n  },\r\n  iconGreen: {\r\n    backgroundColor: green[100],\r\n    color: grey[900],\r\n    fontWeight: 900,\r\n  },\r\n  iconOrange: {\r\n    backgroundColor: orange[500],\r\n    color: \"white\",\r\n    fontWeight: 900,\r\n  },\r\n  iconGreenOut: {\r\n    borderColor: green[500],\r\n    fontWeight: 900,\r\n  },\r\n  iconOrangeOut: {\r\n    borderColor: orange[500],\r\n    fontWeight: 900,\r\n  },\r\n  iconRedOut: {\r\n    borderColor: red[500],\r\n    fontWeight: 900,\r\n  },\r\n  paddingZero: {\r\n    padding: 0,\r\n  },\r\n}));\r\n\r\nconst ownTheam = createTheme({\r\n  // palette: {\r\n  //   type: \"dark\",\r\n  // },\r\n});\r\n\r\nlet api = axios.create({\r\n  baseURL: `/`,\r\n});\r\n\r\nexport default function FProductEM() {\r\n  const classes = OwnStyles();\r\n  let InnerWidth = () => window.innerWidth;\r\n  const [checkWidth, setCheckWidth] = useState(InnerWidth);\r\n  const [enteredData, setEnteredData] = useState({\r\n    FPN: \"\",\r\n    FPD: \"\",\r\n  });\r\n  const [fProduct, setFProduct] = useState([]);\r\n  const [rProduct, setRProduct] = useState([]);\r\n  const [zeroRawProduct, setZeroRawProduct] = useState([]);\r\n  const [selectedProduct, setSelectedProduct] = useState([]);\r\n  const [oldSelectedProduct, setOldSelectedProduct] = useState([]);\r\n  const [newSelectedProduct, setNewSelectedProduct] = useState([]);\r\n  const [updateSelectedProduct, setUpdateSelectedProduct] = useState([]);\r\n\r\n  function getEnteredData(e) {\r\n    let Name = e.target.name;\r\n    let Value = e.target.value;\r\n    setEnteredData((prevState) => ({\r\n      ...prevState,\r\n      [Name]: Value,\r\n    }));\r\n  }\r\n\r\n  const getFPDataEdit = async (id) => {\r\n    let da = await getOneFinalProduct(id).then((data) => data);\r\n\r\n    setFProduct(da.message);\r\n\r\n    const RPProductsC = [];\r\n    const RPProductsZ = [];\r\n\r\n    da.message[0].RRP.forEach((data) => {\r\n      if (!data[\"RPQ\"] <= 0) {\r\n        RPProductsC.push(data);\r\n      } else {\r\n        RPProductsZ.push(data);\r\n      }\r\n    });\r\n    setRProduct(RPProductsC);\r\n    setZeroRawProduct(RPProductsZ);\r\n    setSelectedProduct(da.message[0].SRDetails);\r\n  };\r\n  const { state } = useLocation();\r\n  const Data = state.Data.data;\r\n  useEffect(() => {\r\n    getFPDataEdit(Data[\"id\"]);\r\n    console.log(Data[\"id\"]);\r\n    setEnteredData({\r\n      FPN: Data[\"FPN\"],\r\n      FPD: Data[\"FPD\"],\r\n      id: Data[\"id\"],\r\n    });\r\n\r\n    return () => {\r\n      console.log(\"Cleaned Up!\");\r\n    };\r\n  }, []);\r\n\r\n  const changeRawProductQty = (data, SelData) => {\r\n    let qty = document.querySelectorAll(\"#QtyValue\");\r\n\r\n    qty.forEach((da, dda) => {\r\n      if (data[\"RPN\"] == da[\"name\"]) {\r\n        SelData[\"NRPQ\"] = da.value;\r\n\r\n        return SelData;\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkOnOldProducts = (a, Odata) => {\r\n    let OldSelData = oldSelectedProduct.filter((obj) => obj.id === Odata.id);\r\n    if (OldSelData.length > 0) {\r\n      let oldSelectedData = { ...OldSelData[0], Check: \"OOldProduct\" };\r\n      changeRawProductQty(Odata, oldSelectedData);\r\n      setUpdateSelectedProduct([...updateSelectedProduct, oldSelectedData]);\r\n      onCheckedItem(\"a\", oldSelectedData);\r\n    } else {\r\n      console.log(\"This Is Else Part\");\r\n      let newSelectedData = { ...Odata, Check: \"NewProduct\" };\r\n      changeRawProductQty(Odata, newSelectedData);\r\n      setNewSelectedProduct([...newSelectedProduct, newSelectedData]);\r\n      onCheckedItem(\"a\", newSelectedData);\r\n    }\r\n  };\r\n\r\n  const onCheckedItem = (a, data) => {\r\n    console.log(data);\r\n\r\n    let selData = rProduct.filter((obj) => obj.id === data.id);\r\n    let newData = rProduct.filter((obj) => obj.id !== data.id);\r\n\r\n    let values = changeRawProductQty(data, selData[0]);\r\n\r\n    setRProduct(newData);\r\n    setSelectedProduct([...selectedProduct, selData[0]]);\r\n  };\r\n\r\n  const deleteSelProduct = (b, data) => {\r\n    let newTestingData = { ...data, Check: \"OldProduct\" };\r\n\r\n    setOldSelectedProduct([...oldSelectedProduct, newTestingData]);\r\n\r\n    let selData = selectedProduct.filter((obj) => obj.id === data.id);\r\n    let newData = selectedProduct.filter((obj) => obj.id !== data.id);\r\n\r\n    let changeData = rProduct;\r\n\r\n    changeData.push(selData[0]);\r\n    setRProduct(changeData);\r\n    setSelectedProduct(newData);\r\n  };\r\n\r\n  let navigate = useNavigate();\r\n\r\n  const updateFinalProduct = async () => {\r\n    let newData = {\r\n      FPN: enteredData[\"FPN\"],\r\n      FPD: enteredData[\"FPD\"],\r\n      URM: updateSelectedProduct,\r\n      ORM: oldSelectedProduct,\r\n      NRM: newSelectedProduct,\r\n    };\r\n\r\n    await api.put(`ufp/${enteredData[\"id\"]}`, newData);\r\n    toast.info(\"Changes has been made to Final Product\", {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: true,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"colored\",\r\n      transition: Slide,\r\n    });\r\n\r\n    const Element = document.querySelector(\".Toastify\");\r\n    const config = { childList: true, attributes: true };\r\n    const callBack = (ML, OB) => {\r\n      for (const m of ML) {\r\n        if (m.type === \"childList\" && m.addedNodes.length === 0) {\r\n          navigate(\"/fp\");\r\n        }\r\n      }\r\n    };\r\n    const Obser = new MutationObserver(callBack);\r\n\r\n    Obser.observe(Element, config);\r\n    getFPDataEdit();\r\n  };\r\n\r\n  const goBack = () => navigate(\"/fp\");\r\n\r\n  window.addEventListener(\"resize\", function () {\r\n    setCheckWidth(InnerWidth);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={ownTheam}>\r\n        <Box\r\n          component={checkWidth > 500 ? Container : \"\"}\r\n          style={\r\n            checkWidth > 1280\r\n              ? { maxWidth: \"50%\" }\r\n              : checkWidth > 960\r\n              ? { maxWidth: \"70%\" }\r\n              : { maxWidth: \"100%\" }\r\n          }\r\n        >\r\n          <div className=\"CheckHeader\">\r\n            <Box component={checkWidth > 500 ? Container : \"\"}>\r\n              <Grid container>\r\n                <Grid item xs={12} lg={12} md={12} xl={12} sm={12}>\r\n                  <Box>\r\n                    <Paper>\r\n                      <Box\r\n                        className={classes.textRow}\r\n                        justifyContent=\"space-between\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Typography variant=\"h5\" component={\"h6\"}>\r\n                          {state.Data[\"info\"][0]}\r\n                        </Typography>\r\n                        {!state.Data[\"info\"][3] ? (\r\n                          <Chip\r\n                            className={classes.infoChip}\r\n                            label={`View: ${fProduct.length}`}\r\n                            size=\"small\"\r\n                            clickable={true}\r\n                            onClick={goBack}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        ) : (\r\n                          <Chip\r\n                            className={classes.infoChip}\r\n                            label={`Edit for: ${enteredData[\"FPN\"]}`}\r\n                            size=\"small\"\r\n                            clickable={true}\r\n                            onClick={goBack}\r\n                            variant=\"outlined\"\r\n                          />\r\n                        )}\r\n                      </Box>\r\n                      <Box>\r\n                        <Typography variant=\"body2\" component={\"p\"}>\r\n                          {state.Data[\"info\"][1]}\r\n                        </Typography>\r\n                      </Box>\r\n                      <Divider />\r\n                      <Box>\r\n                        <TextField\r\n                          id=\"outlined-basic\"\r\n                          label=\"Name\"\r\n                          required\r\n                          autoComplete=\"off\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          name=\"FPN\"\r\n                          value={enteredData[\"FPN\"]}\r\n                          onChange={getEnteredData}\r\n                        />\r\n                        <TextField\r\n                          id=\"outlined-basic\"\r\n                          label=\"Description\"\r\n                          required\r\n                          autoComplete=\"off\"\r\n                          variant=\"outlined\"\r\n                          fullWidth\r\n                          margin=\"dense\"\r\n                          name=\"FPD\"\r\n                          value={enteredData[\"FPD\"]}\r\n                          onChange={getEnteredData}\r\n                        />\r\n                      </Box>\r\n                      <Box style={{ userSelect: \"none\" }}>\r\n                        <Grid container>\r\n                          <Grid item xs={12} lg={6} md={12} xl={6} sm={12}>\r\n                            <Box\r\n                              style={{ maxHeight: \"30vh\", overflow: \"scroll\" }}\r\n                            >\r\n                              <Chip\r\n                                label={selectedProduct.length}\r\n                                size=\"small\"\r\n                                style={{ float: \"right\", marginRight: 10 }}\r\n                              />\r\n                              {selectedProduct.length >= 1 && (\r\n                                <TableContainer component={Paper}>\r\n                                  <Table padding=\"checkbox\">\r\n                                    <TableHead>\r\n                                      <TableRow>\r\n                                        <TableCell align=\"center\">#</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Name\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Sel Qty\r\n                                        </TableCell>\r\n\r\n                                        <TableCell align=\"center\">\r\n                                          Price\r\n                                        </TableCell>\r\n                                      </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {selectedProduct.length >= 1 &&\r\n                                        selectedProduct.map((sp, spI) => (\r\n                                          <TableRow key={sp[\"id\"]}>\r\n                                            <TableCell>{spI + 1}</TableCell>\r\n                                            <TableCell>\r\n                                              <Chip\r\n                                                className={\r\n                                                  classes.iconOrangeOut\r\n                                                }\r\n                                                label={sp.RPN}\r\n                                                variant=\"outlined\"\r\n                                                clickable\r\n                                                onDelete={(e) =>\r\n                                                  deleteSelProduct(e, sp)\r\n                                                }\r\n                                                deleteIcon={\r\n                                                  <Cancel\r\n                                                    className={classes.icon}\r\n                                                  />\r\n                                                }\r\n                                              />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                              <Chip\r\n                                                label={`${sp[\"NRPQ\"]}`}\r\n                                                className={\r\n                                                  classes.iconOrangeOut\r\n                                                }\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                              />\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"center\">\r\n                                              <Chip\r\n                                                label={sp[\"NRPQ\"] * sp[\"RPP\"]}\r\n                                                className={\r\n                                                  classes.iconOrangeOut\r\n                                                }\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                              />\r\n                                            </TableCell>\r\n                                          </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              )}\r\n                            </Box>\r\n                          </Grid>\r\n\r\n                          <Box style={{ height: \"10px\" }}></Box>\r\n\r\n                          {rProduct.length >= 1 && (\r\n                            <Grid item xs={12} lg={6} md={12} xl={6} sm={12}>\r\n                              <Box\r\n                                style={{\r\n                                  maxHeight: \"30vh\",\r\n                                  overflow: \"scroll\",\r\n                                }}\r\n                              >\r\n                                <TableContainer component={Paper} style={{}}>\r\n                                  <Table padding=\"checkbox\">\r\n                                    <TableHead>\r\n                                      <TableRow>\r\n                                        <TableCell align=\"center\">\r\n                                          Name\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Req Qty\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Ava Qty\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                          Price\r\n                                        </TableCell>\r\n                                      </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                      {rProduct.map((rp, rpI) => (\r\n                                        <TableRow key={rp[\"id\"]}>\r\n                                          <TableCell>\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              elevation={1}\r\n                                              label={rp.RPN}\r\n                                              variant=\"outlined\"\r\n                                              clickable\r\n                                              onDelete={(e) =>\r\n                                                checkOnOldProducts(e, rp)\r\n                                              }\r\n                                              deleteIcon={\r\n                                                <CheckCircleOutlineIcon\r\n                                                  className={classes.iconS}\r\n                                                />\r\n                                              }\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            {console.log(rp)}\r\n                                            <ButtonIncDec\r\n                                              data={rp}\r\n                                              currentNRPQ={rp[\"NRPQ\"]}\r\n                                              Where=\"IDBTN\"\r\n                                              InputID=\"QtyValue\"\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              label={rp.RPQ}\r\n                                              size=\"small\"\r\n                                              variant=\"outlined\"\r\n                                            />\r\n                                          </TableCell>\r\n                                          <TableCell align=\"center\">\r\n                                            <Chip\r\n                                              className={classes.iconGreenOut}\r\n                                              label={rp.RPP}\r\n                                              size=\"small\"\r\n                                              variant=\"outlined\"\r\n                                            />\r\n                                          </TableCell>\r\n                                        </TableRow>\r\n                                      ))}\r\n                                      {zeroRawProduct.length >= 1 &&\r\n                                        zeroRawProduct.map((zp, zpI) => (\r\n                                          <>\r\n                                            <Divider />\r\n                                            <TableRow key={zp[\"id\"]}>\r\n                                              <TableCell>\r\n                                                <Chip\r\n                                                  elevation={1}\r\n                                                  label={zp.RPN}\r\n                                                  variant=\"outlined\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  className={classes.iconRedOut}\r\n                                                />\r\n                                              </TableCell>\r\n                                              <TableCell align=\"center\"></TableCell>\r\n                                              <TableCell align=\"center\">\r\n                                                <Chip\r\n                                                  className={classes.iconRedOut}\r\n                                                  label={zp.RPQ}\r\n                                                  size=\"small\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  variant=\"outlined\"\r\n                                                />\r\n                                              </TableCell>\r\n                                              <TableCell align=\"center\">\r\n                                                <Chip\r\n                                                  className={classes.iconRedOut}\r\n                                                  label={zp.RPP}\r\n                                                  size=\"small\"\r\n                                                  clickable={false}\r\n                                                  disabled={true}\r\n                                                  variant=\"outlined\"\r\n                                                />\r\n                                              </TableCell>\r\n                                            </TableRow>\r\n                                          </>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                  </Table>\r\n                                </TableContainer>\r\n                              </Box>\r\n                            </Grid>\r\n                          )}\r\n                        </Grid>\r\n                      </Box>\r\n                      <Box\r\n                        className={classes.textRow}\r\n                        justifyContent=\"center\"\r\n                        alignItems=\"center\"\r\n                      >\r\n                        <Button\r\n                          className={classes.infoBtn}\r\n                          variant=\"outlined\"\r\n                          size=\"medium\"\r\n                          variant=\"outlined\"\r\n                          startIcon={<AddIcon />}\r\n                          type=\"submit\"\r\n                          onClick={updateFinalProduct}\r\n                        >\r\n                          {state.Data[\"info\"][2]}\r\n                        </Button>\r\n                      </Box>\r\n                    </Paper>\r\n                  </Box>\r\n                </Grid>\r\n                {checkWidth > 768 && (\r\n                  <>\r\n                    <Grid item lg={2} md={1} xl={2}></Grid>\r\n                    <Grid item xs={12} lg={5} md={6} xl={5} sm={7}></Grid>\r\n                  </>\r\n                )}\r\n              </Grid>\r\n            </Box>\r\n          </div>\r\n        </Box>\r\n      </ThemeProvider>\r\n      <ToastContainer />\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Chart } from \"react-google-charts\";\r\n\r\nfunction FPChartStacjed({ FData }) {\r\n  const qtyData = [];\r\n  const options = {\r\n    isStacked: \"percent\",\r\n    width: \"100%\",\r\n    height: \"50vh\",\r\n    legend: { position: \"top\", maxLines: 3 },\r\n    chart: {\r\n      title: \"Chess opening moves\",\r\n      subtitle: \"popularity by percentage\",\r\n    },\r\n    bar: { groupWidth: \"75%\" },\r\n    vAxis: {\r\n      minValue: 0,\r\n      ticks: [0, 0.3, 0.6, 0.9, 1],\r\n    },\r\n  };\r\n\r\n  const addValies = () => {\r\n    qtyData.push([\"Final Product\", { role: \"style\" }]);\r\n\r\n    FData.map((FData, nums) => {\r\n      qtyData.push([FData[\"FPN\"]]);\r\n\r\n      FData[\"SRDetails\"].map((frprods, frpI) => {\r\n        qtyData[nums][frpI + 1] = frprods[\"RPN\"];\r\n        qtyData[nums + 1][frpI + 1] = frprods[\"NRPQ\"];\r\n      });\r\n    });\r\n  };\r\n  addValies();\r\n\r\n  return (\r\n    <>\r\n      <Chart\r\n        chartType=\"ColumnChart\"\r\n        data={qtyData}\r\n        width=\"100%\"\r\n        options={options}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FPChartStacjed;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nimport { getAllFinalProduct } from \"../../Data/ProductsData\";\r\nimport RPPiChart from \"../Charts/RPCharts/RPPiChart\";\r\n\r\nimport FPChartStacjed from \"../Charts/FPCharts/FPChartStacjed\";\r\n\r\nexport default function VNDashboard() {\r\n  const [fProduct, setFProduct] = useState([]);\r\n\r\n  const getFPData = async () => {\r\n    let da = await getAllFinalProduct().then((data) => data);\r\n\r\n    setFProduct(da.message);\r\n  };\r\n  useEffect(() => {\r\n    getFPData();\r\n\r\n    return () => {\r\n      console.log(\"Cleaned Up!\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <div\r\n          className=\"MapSec1\"\r\n          style={{ flexDirection: window.innerWidth < 768 ? \"column\" : \"row\" }}\r\n        >\r\n          <div>\r\n            <RPPiChart />\r\n          </div>\r\n          <div>\r\n            <h6>Final Product Details</h6>\r\n            <div\r\n              style={{\r\n                width: \"100%\",\r\n                display: \"flex\",\r\n                overflow: \"scroll\",\r\n              }}\r\n            >\r\n              {fProduct.map((fda, ind) => (\r\n                <div key={ind} style={{ display: \"inline-flex\" }}>\r\n                  <FPChartStacjed FData={[fda]} />\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\r\nimport { Route, BrowserRouter, Routes } from \"react-router-dom\";\r\n\r\nimport RPViewM from \"./Components/RawProduct/RPViewM\";\r\nimport RProductAEM from \"./Components/RawProduct/RProductAEM\";\r\nimport FPView from \"./Components/FinalProduct/FPView\";\r\nimport PPView from \"./Components/ProcessProduct/PPView\";\r\n\r\nimport NavBar from \"./Components/NavBar\";\r\n\r\nimport FProductAEM from \"./Components/FinalProduct/FProductAEM\";\r\nimport FProductEM from \"./Components/FinalProduct/FProductEM\";\r\nimport VNDashboard from \"./Components/Dashboard/VNDashboard\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <Routes>\r\n        <Route path=\"/\" exact element={<VNDashboard />} />\r\n        <Route path=\"/rp\" exact element={<RPViewM />} />\r\n        <Route path=\"/rp/add\" exact element={<RProductAEM />} />\r\n        <Route path=\"/rp/update\" exact element={<RProductAEM />} />\r\n        <Route path=\"/fp\" exact element={<FPView />} />\r\n        <Route path=\"/fp/add\" exact element={<FProductAEM />} />\r\n        <Route path=\"/fp/update\" exact element={<FProductEM />} />\r\n        <Route path=\"/vpp\" exact element={<PPView />} />\r\n        <Route path=\"/dashboard\" exact element={<VNDashboard />} />\r\n      </Routes>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./CommonComps/css/Pra@Response.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    {/* <React.StrictMode> */}\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n    {/* </React.StrictMode>, */}\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}